ghost-shell
-----------

ghost-shell is similar to git-shell. It is used to provide a restricted,
non-interactive shell to the git user. With git-shell, only a few git commands
are available to push to/pull from git repositories. It is intended to be run
behind SSH, with every user having their SSH key in the
/home/git/.ssh/authorized_keys file.

To try it, you can create a ghost user:

  # Ubuntu
  > sudo adduser \
    --system \
    --shell /home/ghost/bin/ghost-shell \
    --gecos 'Ghost - Git hosting suite' \
    --group \
    --disabled-password \
    --home /home/ghost \
    ghost

  # Arch Linux
  > sudo useradd \
    --system \
    --shell /home/ghost/bin/ghost-shell \
    --create-home \
    --user-group \
    ghost

and copy your public key to /home/ghost/.ssh/authorized_keys. Permissions
should look like these (if the authorized_keys file can be written by someone
else than ghost, the SSH daemon will refuse any connection):

  > sudo ls -la /home/ghost/.ssh
  total 16
  drwxr-xr-x 2 ghost ghost 4096 Jan  6 23:11 .
  drwx------ 4 ghost ghost 4096 Jan  6 23:05 ..
  -rw-r--r-- 1 ghost ghost  398 Jan  6 23:11 authorized_keys

Copy also ghost-shell to /home/ghost/bin/ghost-shell and make sure your SSH
daemon configuration allow the ghost user to log. At this point you should be
able to ssh into your machine with the ghost user:

  > ssh ghost@localhost
  Last login: Fri Jan  6 23:14:02 2012 from localhost.localdomain
  Ghost shell.
  Connection to localhost closed.

(`Ghost shell.` is the standard output of ghost-shell, and is everything
ghost-shell is able to do right now.)

ghost-command
-------------

When you share the git user between different people and you want to enforce
some access rights, you have to be able to know who is trying to run a git
command. A simple way to do so is to use the command= entry that can be
associated to a public key in ~/.ssh/authorized_keys and pass some username to
the command, thus making excplicit the association between the username and the
public key.

For instance, with the following authorized_keys file, wheneve the user noteed
tries to run a git command through ssh, ghost-command will be executed.

  command="/home/ghost/bin/ghost-command --user noteed" ssh-rsa
  <public-key> noteed@gmail.com

Because ghost-command is invoked with --user noteed, it knows who is running
the command. This is the approach taken by e.g. gitosis. Finally, the original
command is made available to ghost-command by the ssh daemon through the
environment variable SSH_ORIGINAL_COMMAND.

Git/git-shell interaction through SSH
-------------------------------------

When you add a remote, e.g.:

  > git remote add ghost ghost@localhost:noteed/ghost.git

a new remote entry is created in the .git/config file:

  [remote "ghost"]
          url = ghost@localhost:noteed/ghost.git
          fetch = +refs/heads/*:refs/remotes/ghost/*

and you can push to it (and our ghost-shell will break the protocol as it tries
to answer with 'Ghost shell.'):

  > git push ghost master
  fatal: protocol error: bad line length character: Ghos

In fact, it was invoke like so:

  ghost-shell -c git-receive-pack 'noteed/ghost.git'

Just to have an idea of what is expected, I manually run it against github:

  > ssh git@github.com git-receive-pack 'noteed/ghost.git'
  00724d3fa73030df07bcf97634a58b6d63382af11d16 refs/heads/master report-status delete-refs side-band-64k ofs-delta
  0000
  ^CKilled by signal 2.

  > ssh git@github.com git-receive-pack 'noteed/ghos.git'
  ERROR: noteed/ghos.git doesn't exist. Did you enter it correctly?

